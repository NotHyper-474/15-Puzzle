# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            configurePreset: x64-msvc-windows
            buildPreset: release
          - os: windows-latest
            c_compiler: clang
            configurePreset: x64-clang-windows
            buildPreset: clang-release
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            configurePreset: x64-clang-linux
            buildPreset: clang-linux-release
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v3
      with: 
        submodules: true

    - uses: lukka/get-cmake@latest
    
    - name: run-vcpkg
      uses: lukka/run-vcpkg@v11.5
      with:
        vcpkgJsonGlob: 'vcpkg.json'

    # Note: if the preset misses the "configuration", it is possible to explicitly select the
    # configuration with the additional `--config` flag, e.g.:
    #   buildPreset: 'ninja-vcpkg'
    #   buildPresetAdditionalArgs: "[`--config`, `Release`]"
    #   testPreset: 'ninja-vcpkg'
    #   testPresetAdditionalArgs: "[`--config`, `Release`]"
    - name: Run CMake+vcpkg+Ninja+CTest to build packages and generate/build/test the code.
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.configurePreset }}
        buildPreset: ${{ matrix.buildPreset }}
        buildPresetAdditionalArgs: "['--target all']"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4.4.3
      with:
          name: ${{ matrix.os }}
          path: out/build/${{ matrix.configurePreset }}
          if-no-files-found: warn
            
